name: Minecraft Server with Auto Backup + SSH Rotation

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"  # Every 15 minutes

jobs:
  minecraft:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y zip unzip default-jdk tmate

      - name: Setup Git & rclone
        run: |
          git config --global user.name "Auto Bot"
          git config --global user.email "auto@example.com"
          echo "${{ secrets.RCLONE_CONF }}" > rclone.conf

      - name: Restore from Filebase (if any)
        run: |
          mkdir -p server
          rclone --config rclone.conf copy filebase:${{ secrets.FILEBASE_BUCKET }}/mcbackup.zip .
          if [ -f mcbackup.zip ]; then
            unzip -o mcbackup.zip -d .
            echo "✅ Backup restored."
          else
            echo "❌ No backup found, starting fresh."
          fi

      - name: Download Minecraft Paper
        run: |
          cd server
          if [ ! -f paper.jar ]; then
            curl -o paper.jar https://api.papermc.io/v2/projects/paper/versions/1.20.1/builds/175/downloads/paper-1.20.1-175.jar
          fi
          echo "eula=true" > eula.txt

      - name: Start Minecraft Server
        run: |
          cd server
          java -Xmx2G -Xms2G -jar paper.jar nogui &
          echo $! > ../mc_pid.txt
        timeout-minutes: 1

      - name: Start Auto Backup + SSH Loop
        run: |
          cat > loop.sh << 'EOF'
          #!/bin/bash
          count=0
          while true; do
            echo "[tmate] Starting..."
            tmate -S /tmp/tmate.sock new-session -d
            tmate -S /tmp/tmate.sock wait tmate-ready
            sshlink=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
            echo "$sshlink" | tee links/ssh.txt

            echo "[git] Pushing SSH link..."
            git pull origin main
            git add links/ssh.txt
            git commit -m "Updated SSH link $(date)" || true
            git push origin main

            count=$((count + 1))

            if (( count % 2 == 0 )); then
              echo "[Backup] Zipping server..."
              zip -r mcbackup.zip server
              echo "[Backup] Uploading to Filebase..."
              rclone --config rclone.conf copy mcbackup.zip filebase:${{ secrets.FILEBASE_BUCKET }}
            fi

            echo "[Sleep] Waiting 15 mins..."
            sleep 900
          done
          EOF
          chmod +x loop.sh
          ./loop.sh          unzip -o mcbackup.zip -d server
        fi

    - name: Download Paper Server
      run: |
        wget -O paper.jar https://api.papermc.io/v2/projects/paper/versions/1.20.1/builds/103/downloads/paper-1.20.1-103.jar
        mv paper.jar server/paper.jar
        echo "eula=true" > server/eula.txt

    - name: Start Minecraft Server
      run: |
        cd server
        screen -dmS mc java -Xmx2G -jar paper.jar nogui

    - name: Auto Backup + Refresh SSH every 15/30 min
      run: |
        git config --global user.name "Auto Bot"
        git config --global user.email "bot@example.com"

        # Start background loop
        (while true; do
          START_TIME=$(date +%s)

          echo "[SSH] Creating new tmate session..."
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH_LINK=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "$SSH_LINK" | tee links/ssh.txt

          echo "[Git] Pushing updated ssh.txt..."
          git pull origin main
          git add links/ssh.txt
          git commit -m "Updated SSH link $(date)" || true
          git push origin main

          echo "[Sleep] Waiting 15 minutes for next SSH..."
          sleep 900

          # Every 2 SSH refreshes (30 minutes), do backup
          ELAPSED=$(($(date +%s) - START_TIME))
          if (( $ELAPSED >= 1800 )); then
            echo "[Backup] Zipping server..."
            zip -r mcbackup.zip server

            echo "[Backup] Uploading to Filebase..."
            rclone --config=rclone.conf copy mcbackup.zip filebase:${{ secrets.FILEBASE_BUCKET }}
          fi
        done) &
        
        # Keep job alive
        sleep 21600  # 6 hours
